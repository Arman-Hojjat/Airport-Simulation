
/**
 * 
 *
 * @author Arman Hojjatoleslami
 */

/**
 * Here are all the imports needed for this project.
 */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.Timer;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public static Queue<Integer> landingQueue = new LinkedList<Integer>();
    public static Queue<Integer> takeOffQueue = new LinkedList<Integer>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        statusInfo = new javax.swing.JLabel();
        ArrivalsTitle = new javax.swing.JLabel();
        TakeoffsTitle = new javax.swing.JLabel();
        ArrivalsScroll = new javax.swing.JScrollPane();
        arrivals = new javax.swing.JTextArea();
        TakeoffsScroll = new javax.swing.JScrollPane();
        takeoffs = new javax.swing.JTextArea();
        start = new javax.swing.JButton();
        ArrivingFlightTitle = new javax.swing.JLabel();
        TakeoffsFlightTitle = new javax.swing.JLabel();
        arrivingField = new javax.swing.JTextField();
        takeoffField = new javax.swing.JTextField();
        exit = new javax.swing.JButton();
        drawingArea1 = new DrawingArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        Title.setText("Airport Simulator");

        statusInfo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        statusInfo.setText("Press 'START' to begin simulation!");

        ArrivalsTitle.setFont(new java.awt.Font("Yu Gothic", 0, 14)); // NOI18N
        ArrivalsTitle.setText("Arrivals");

        TakeoffsTitle.setFont(new java.awt.Font("Yu Gothic", 0, 14)); // NOI18N
        TakeoffsTitle.setText("Takeoffs");

        ArrivalsScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ArrivalsScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        arrivals.setEditable(false);
        arrivals.setColumns(20);
        arrivals.setRows(5);
        arrivals.setFocusable(false);
        arrivals.setRequestFocusEnabled(false);
        ArrivalsScroll.setViewportView(arrivals);

        TakeoffsScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        TakeoffsScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        takeoffs.setEditable(false);
        takeoffs.setColumns(20);
        takeoffs.setRows(5);
        takeoffs.setFocusable(false);
        takeoffs.setRequestFocusEnabled(false);
        TakeoffsScroll.setViewportView(takeoffs);

        start.setFont(new java.awt.Font("Unispace", 0, 14)); // NOI18N
        start.setText("START");
        start.setFocusable(false);
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        ArrivingFlightTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ArrivingFlightTitle.setText("Arriving Flight:");

        TakeoffsFlightTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TakeoffsFlightTitle.setText("Takeoff Flight:");

        arrivingField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        arrivingField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrivingFieldActionPerformed(evt);
            }
        });

        takeoffField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        takeoffField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeoffFieldActionPerformed(evt);
            }
        });

        exit.setFont(new java.awt.Font("Unispace", 0, 14)); // NOI18N
        exit.setText("EXIT");
        exit.setFocusable(false);
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        drawingArea1.setMaximumSize(new java.awt.Dimension(400, 300));
        drawingArea1.setPreferredSize(new java.awt.Dimension(400, 300));

        javax.swing.GroupLayout drawingArea1Layout = new javax.swing.GroupLayout(drawingArea1);
        drawingArea1.setLayout(drawingArea1Layout);
        drawingArea1Layout.setHorizontalGroup(
            drawingArea1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        drawingArea1Layout.setVerticalGroup(
            drawingArea1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ArrivalsTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ArrivalsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(start)
                                .addGap(30, 30, 30)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TakeoffsTitle)
                            .addComponent(TakeoffsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(Title)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(95, 95, 95))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(exit)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(ArrivingFlightTitle)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(arrivingField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(TakeoffsFlightTitle)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(takeoffField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(drawingArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statusInfo)
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusInfo)
                .addGap(18, 18, 18)
                .addComponent(drawingArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArrivalsTitle)
                    .addComponent(TakeoffsTitle))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ArrivalsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addComponent(TakeoffsScroll))
                        .addGap(18, 25, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(start)
                        .addGap(166, 166, 166)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArrivingFlightTitle)
                    .addComponent(TakeoffsFlightTitle)
                    .addComponent(arrivingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(takeoffField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(exit)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        t.start();
    }//GEN-LAST:event_startActionPerformed
   
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed
    
    private void arrivingFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrivingFieldActionPerformed
        try{                                                                      // This runs when the enter key is pressed after typing in the flight number for landings.
        if((arrivingField.getText().isEmpty()) != true){
            landingQueue.add(Integer.parseInt(arrivingField.getText()));
        }
        if (arrivals.getText().isEmpty() && (arrivingField.getText().isEmpty())!= true) {
            arrivals.setText(arrivingField.getText());
        } else if((arrivingField.getText().isEmpty())!= true){
            arrivals.setText(arrivals.getText() + "\n" + arrivingField.getText());
        }
        arrivingField.setText("");
        } catch(NumberFormatException e){
            
        }
    }//GEN-LAST:event_arrivingFieldActionPerformed
    
    private void takeoffFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeoffFieldActionPerformed
        try{                                                                      // This runs when the enter key is pressed after typing in the flight number for departure.
        if((takeoffField.getText().isEmpty())!= true){
            takeOffQueue.add(Integer.parseInt(takeoffField.getText()));
        }
        if (takeoffs.getText().isEmpty() && (takeoffField.getText().isEmpty())!= true) {
            takeoffs.setText(takeoffField.getText());
        } else if((takeoffField.getText().isEmpty())!= true) {
            takeoffs.setText(takeoffs.getText() + "\n" + takeoffField.getText());
        }
        takeoffField.setText("");
        } catch(NumberFormatException e){
            
        }
    }//GEN-LAST:event_takeoffFieldActionPerformed
   
    public GUI() { // This is the GUI constructor.
        initComponents();
        
        File takeoffFile = new File("takeoffs.txt");  // Initializing variables.
        File arrivalFile = new File("arrivals.txt");
        Scanner read = null;
        String current;
       
        
        
        try {                                  // Populating the TextFields and the Queues with the flight numbers.
            read = new Scanner(takeoffFile);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        current = read.nextLine();
        takeoffs.setText(current);
        takeOffQueue.add(Integer.parseInt(current));
        while (read.hasNextLine()) {
            current = read.nextLine();
            takeoffs.setText(takeoffs.getText() + "\n" + current);
            takeOffQueue.add(Integer.parseInt(current));
        }
        try {
            read = new Scanner(arrivalFile);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        current = read.nextLine();
        arrivals.setText(current);
        landingQueue.add(Integer.parseInt(current));
        while (read.hasNextLine()) {
            current = read.nextLine();
            arrivals.setText(arrivals.getText() + "\n" + current);
            landingQueue.add(Integer.parseInt(current));
        }
    }

    /**
     * The global Timer variables.
     */
    int tDuration = 600;
    Timer t = new Timer(tDuration, new TimerListener());
    int interval;
    int arrivalNum = 0;
    
    private class TimerListener implements ActionListener { // the class runs every 600 milliseconds.
        @Override
        
        public void actionPerformed(ActionEvent e) {               //This makes sure that there is a 2:1 arrival to take off ratio.
            interval++;
         
            if (arrivalNum < 2 && (arrivals.getText().isEmpty())!= true) {             //Calling to process an arrival.
                statusInfo.setText("Flight " + landingQueue.peek() + " is next to land in " + (5 - interval));
                if (interval == 5) {
                    arrivalNum++;
                    interval = 0;
                    arrivalProcess();
                    statusInfo.setText("Plane has landed.");
                    
                    DrawingArea.ballA = new Ball (100,10); // create the new ball and initiate the paint component in drawing area
                    Ball.yDir = 1;
                    DrawingArea.ballReal = true;
                    
                }
               
            } else if ((takeoffs.getText().isEmpty())!= true) {                     //Calling to process a takeoff.
                statusInfo.setText("Flight " + takeOffQueue.peek() + " is next to takeoff in " + (3 - interval));
                
                if (interval == 3) {
                    arrivalNum = 0;
                    interval = 0;
                    takeOffProcess();
                    statusInfo.setText("Plane has departed.");
                    DrawingArea.ballA = new Ball (100,200);  //creates a new ball to take off and initiate the paint component in drawing area
                    Ball.yDir = -1;
                    DrawingArea.ballReal = true;
                    
                }
              
            } else { //Resetting the variables meaning the cycle was completed or there is nothing in the queue.
                interval = 0;
                arrivalNum = 0;
                DrawingArea.ballReal = false;
            }
        }
    }
    
    private void arrivalProcess() { //This method processes an arrival by deleting the top entry on the list and the queue.
        Scanner read = new Scanner(arrivals.getText());
        String output = "";
        landingQueue.poll();
        read.nextLine();
        if (read.hasNextLine()) {
            output = read.nextLine();
        }
        while (read.hasNextLine()) {
            output = output + "\n" + read.nextLine();
        }
        arrivals.setText(output);
    }
 
    private void takeOffProcess() { //This method processes a takeoff by deleting the top entry on the list and the queue.
        Scanner read = new Scanner(takeoffs.getText());
        String output = "";
        takeOffQueue.poll();
        read.nextLine();
        if (read.hasNextLine()) {
            output = read.nextLine();
        }
        while (read.hasNextLine()) {
            output = output + "\n" + read.nextLine();
        }
        takeoffs.setText(output);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ArrivalsScroll;
    private javax.swing.JLabel ArrivalsTitle;
    private javax.swing.JLabel ArrivingFlightTitle;
    private javax.swing.JLabel TakeoffsFlightTitle;
    private javax.swing.JScrollPane TakeoffsScroll;
    private javax.swing.JLabel TakeoffsTitle;
    private javax.swing.JLabel Title;
    private javax.swing.JTextArea arrivals;
    private javax.swing.JTextField arrivingField;
    private DrawingArea drawingArea1;
    private javax.swing.JButton exit;
    private javax.swing.JButton start;
    private javax.swing.JLabel statusInfo;
    private javax.swing.JTextField takeoffField;
    private javax.swing.JTextArea takeoffs;
    // End of variables declaration//GEN-END:variables
}
